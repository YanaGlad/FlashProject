#include <iostream>
#include "MersenneTwisterImplementation.h"
#include <string>
#include <vector>

int main() {
    std::cout << "Hello, World!" << std::endl;

    // creating instance of MersenneTwisterImplementation class.
    // Constructor parameters - range of creating values.
    // So our generator will create numbers between 7 and 9.
    MersenneTwisterImplementation<uint64_t> mersenneTwisterImplementation = MersenneTwisterImplementation<uint64_t>(7, 9);
    std::cout << mersenneTwisterImplementation.generateUint32Value() << std::endl;

    // Ten random numbers created in range from 0 to 100000.
    for (size_t i = 0; i < 10; ++i) {
        MersenneTwisterImplementation<uint64_t> mersenneTwisterImplementation = MersenneTwisterImplementation<uint64_t>(0, 100000);
        std::cout << mersenneTwisterImplementation.generateUint32Value() << std::endl;
    }

    MersenneTwisterImplementation<uint64_t> mersenneTwister = MersenneTwisterImplementation<uint64_t>(0, 1001);

    // Generating uint32_t vector of random numbers.
    // First parameter is quantity of random numbers.
    std::vector<uint32_t> vec = mersenneTwister.generateUint32Vector(3);

    std::cout << "Test for uint32_t vectors" << std::endl;

    for (auto item : vec) {
        std::cout << item << std::endl;
    }

    std::cout << "Test for uint64_t vectors" << std::endl;

    // Generating uint64_t vector of random numbers.
    // First parameter is quantity of random numbers.
    std::vector<uint64_t> vec1 = mersenneTwister.generateUint64Vector(3);

    for (auto item : vec1) {
        std::cout << item << std::endl;
    }

    // Second parameter is ONE number - seed.
    // So, we'll have that quantity of numbers which we gave into function,
    // Generated by seed which was given as the second parameter.
    // In that example we would have uint32_t vector of three "37" numbers.
    std::vector<uint32_t> vec11 = mersenneTwister.generateUint32Vector(3, 1);

    std::cout << "Test for uint32_t vectors with seed" << std::endl;

    for (auto item : vec11) {
        std::cout << item << std::endl;
    }

    std::cout << "Test for uint64_t vectors with seed" << std::endl;
    // Second parameter is ONE number - seed.
    // So, we'll have that quantity of numbers which we gave into function,
    // Generated by seed which was given as the second parameter.
    // In that example we would have uint64_t vector of three "37" numbers.
    std::vector<uint64_t> vec12 = mersenneTwister.generateUint64Vector(3, 1);

    for (auto item : vec12) {
        std::cout << item << std::endl;
    }

    // Firstly we're creating the vector of seeds.
    std::vector<uint32_t> seedUint32 = {1, 2, 3};
    // Secondly, we're creating vector of random numbers which was generated by seeds in previous vector.
    // First number of vec111 will be created by first seed of seedUint32 vector.
    // Second number of vec111 will be created by second seed of seedUint32 vector.
    // Third number of vec111 will be created by Third seed of seedUint32 vector.
    std::vector<uint32_t> vec111 = mersenneTwister.generateUint32VectorWithVectorOfSeeds(3, seedUint32); // first parameter is quantity of numbers to generate

    std::cout << "Test for uint32_t vectors with vector of seeds" << std::endl;

    for (auto item : vec111) {
        std::cout << item << std::endl;
    }

    std::cout << "Test for uint64_t vectors with vector of seeds" << std::endl;

    // Firstly we're creating the vector of seeds.
    std::vector<uint32_t> seedUint64 = {4, 5, 6};
    // Secondly, we're creating vector of random numbers which was generated by seeds in previous vector.
    // First number of vec122 will be created by first seed of seedUint64 vector.
    // Second number of vec122 will be created by second seed of seedUint64 vector.
    // Third number of vec122 will be created by Third seed of seedUint64 vector.
    std::vector<uint64_t> vec122 = mersenneTwister.generateUint64VectorWithVectorOfSeeds(3, seedUint64); // first parameter is quantity of numbers to generate

    for (auto item : vec122) {
        std::cout << item << std::endl;
    }

    std::cout << "Test with seed" << std::endl;

    MersenneTwisterImplementation<uint64_t> mersenneWithSeed = MersenneTwisterImplementation<uint64_t>(0, 100000);

    // Generating numbers with seeds to test generating with seed
    std::cout << mersenneTwister.generateUint32Value(1) << std::endl;
    // Generating numbers with seeds to test generating with seed
    std::cout << mersenneTwister.generateUint32Value(1) << std::endl;

    std::cout << "EQUALS!" << std::endl;

    mersenneTwister.setMinimum(0); // change minimum value of range to generate
    mersenneTwister.setMaximum(200000); // change maximum value of range to generate
    return 0;
}
